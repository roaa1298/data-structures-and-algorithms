/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge8;

import org.junit.jupiter.api.Test;



import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void linkedListInstantTest(){
        LinkedList<String> Animals = new LinkedList<>();
        assertNull(Animals.head);
    }
    @Test void insertTest(){
        LinkedList<String> Animals = new LinkedList<>();
        Animals.InsertNode("cat");
        Animals.InsertNode("dog");
        Animals.InsertNode("bird");
        Animals.InsertNode("horse");
        Animals.InsertNode("bear");
        Animals.InsertNode("lion");
        Animals.InsertNode("fish");
        assertNotNull(Animals);
    }
    @Test void headTest(){
        LinkedList<String> Animals = new LinkedList<>();
        Animals.InsertNode("cat");
        Animals.InsertNode("dog");
        Animals.InsertNode("bird");
        Animals.InsertNode("horse");
        Animals.InsertNode("bear");
        Animals.InsertNode("lion");
        Animals.InsertNode("fish");
        String res="fish";
        assertEquals(res,Animals.head.value);
    }
    @Test void existsTest(){
        LinkedList<String> Animals = new LinkedList<>();
        Animals.InsertNode("cat");
        Animals.InsertNode("dog");
        Animals.InsertNode("bird");
        Animals.InsertNode("horse");
        Animals.InsertNode("bear");
        Animals.InsertNode("lion");
        Animals.InsertNode("fish");
        boolean bool=true;
        assertEquals(bool,Animals.Includes("bear"));
    }
    @Test void notExistsTest(){
        LinkedList<String> Animals = new LinkedList<>();
        Animals.InsertNode("cat");
        Animals.InsertNode("dog");
        Animals.InsertNode("bird");
        Animals.InsertNode("horse");
        Animals.InsertNode("bear");
        Animals.InsertNode("lion");
        Animals.InsertNode("fish");
        boolean bool=false;
        assertEquals(bool,Animals.Includes("fox"));
    }
    @Test void toStringTest(){
        LinkedList<String> Animals = new LinkedList<>();
        Animals.InsertNode("cat");
        Animals.InsertNode("dog");
        Animals.InsertNode("bird");
        Animals.InsertNode("horse");
        Animals.InsertNode("bear");
        Animals.InsertNode("lion");
        Animals.InsertNode("fish");
        String res="{fish} ->{lion} ->{bear} ->{horse} ->{bird} ->{dog} ->{cat} -> NULL";
        assertEquals(res,Animals.toString());
    }
    @Test void addOneLastTest(){
        LinkedList<Integer> numbers = new LinkedList<>();
        numbers.Append(1);
        String res="{1} -> NULL";
        assertEquals(res,numbers.toString());
    }

    @Test void addLastTest(){
        LinkedList<Integer> numbers = new LinkedList<>();
        numbers.Append(1);
        numbers.Append(3);
        numbers.Append(2);
        String res="{1} ->{3} ->{2} -> NULL";
        assertEquals(res,numbers.toString());
    }
    @Test void insertBeforeTest(){
        LinkedList<Integer> numbers = new LinkedList<>();
        numbers.Append(1);
        numbers.Append(3);
        numbers.Append(2);
        numbers.InsertBefore(3, 5);
        String res="{1} ->{5} ->{3} ->{2} -> NULL";
        assertEquals(res,numbers.toString());
    }
    @Test void insertBeforeFirstTest(){
        LinkedList<Integer> numbers = new LinkedList<>();
        numbers.Append(1);
        numbers.Append(3);
        numbers.Append(2);
        numbers.InsertBefore(1, 5);
        String res="{5} ->{1} ->{3} ->{2} -> NULL";
        assertEquals(res,numbers.toString());
    }
    @Test void insertAfterTest(){
        LinkedList<Integer> numbers = new LinkedList<>();
        numbers.Append(1);
        numbers.Append(3);
        numbers.Append(2);
        numbers.InsertAfter(3, 5);
        String res="{1} ->{3} ->{5} ->{2} -> NULL";
        assertEquals(res,numbers.toString());
    }
    @Test void insertAfterLastTest(){
        LinkedList<Integer> numbers = new LinkedList<>();
        numbers.Append(1);
        numbers.Append(3);
        numbers.Append(2);
        numbers.InsertAfter(2, 5);
        String res="{1} ->{3} ->{2} ->{5} -> NULL";
        assertEquals(res,numbers.toString());
    }
    @Test void KthTest(){
        LinkedList<Integer> numbers = new LinkedList<>();
        numbers.Append(1);
        numbers.Append(3);
        numbers.Append(8);
        numbers.Append(2);
        assertEquals(3,numbers.Kth(2));
    }
    @Test void KgreaterThanLengthTest(){
        assertThrows(IllegalArgumentException.class, () -> {
            LinkedList<Integer> numbers = new LinkedList<>();
            numbers.Append(1);
            numbers.Append(3);
            numbers.Append(8);
            numbers.Append(2);
            numbers.Kth(6);

        });

    }

    @Test void sameValuesTest(){
        assertThrows(IllegalArgumentException.class, () -> {
            LinkedList<Integer> numbers = new LinkedList<>();
            numbers.Append(1);
            numbers.Append(3);
            numbers.Append(8);
            numbers.Append(2);
            numbers.Kth(4);

        });

    }
    @Test void NegativeValueTest(){
        assertThrows(IllegalArgumentException.class, () -> {
            LinkedList<Integer> numbers = new LinkedList<>();
            numbers.Append(1);
            numbers.Append(3);
            numbers.Append(8);
            numbers.Append(2);
            numbers.Kth(-3);

        });

    }
    @Test void SizeOneTest(){
        assertThrows(IllegalArgumentException.class, () -> {
            LinkedList<Integer> numbers = new LinkedList<>();
            numbers.Append(1);
            numbers.Kth(0);

        });

    }
    @Test void zipListsTest(){
        LinkedList<Integer> numbers = new LinkedList<>();
        numbers.Append(1);
        numbers.Append(3);
        numbers.Append(2);
        LinkedList<Integer> numbers2 = new LinkedList<>();
        numbers2.Append(5);
        numbers2.Append(9);
        numbers2.Append(4);
        String res="{1} ->{5} ->{3} ->{9} ->{2} ->{4} -> NULL";
        assertEquals(res,numbers.zipLists(numbers,numbers2).toString());
    }
    @Test void zipLists2Test(){
        LinkedList<Integer> numbers = new LinkedList<>();
        numbers.Append(1);
        numbers.Append(3);
        LinkedList<Integer> numbers2 = new LinkedList<>();
        numbers2.Append(5);
        numbers2.Append(9);
        numbers2.Append(4);
        String res="{1} ->{5} ->{3} ->{9} ->{4} -> NULL";
        assertEquals(res,numbers.zipLists(numbers,numbers2).toString());
    }
    @Test void zipLists3Test(){
        LinkedList<Integer> numbers = new LinkedList<>();
        numbers.Append(1);
        numbers.Append(3);
        numbers.Append(2);
        LinkedList<Integer> numbers2 = new LinkedList<>();
        numbers2.Append(5);
        numbers2.Append(9);
        String res="{1} ->{5} ->{3} ->{9} ->{2} -> NULL";
        assertEquals(res,numbers.zipLists(numbers,numbers2).toString());
    }
    @Test void zipLists4Test(){
        LinkedList<Integer> numbers = new LinkedList<>();
        numbers.Append(1);
        numbers.Append(3);
        numbers.Append(2);
        LinkedList<Integer> numbers2 = new LinkedList<>();
        String res="{1} ->{3} ->{2} -> NULL";
        assertEquals(res,numbers.zipLists(numbers,numbers2).toString());
    }
    @Test void zipLists5Test(){
        LinkedList<Integer> numbers = new LinkedList<>();
        LinkedList<Integer> numbers2 = new LinkedList<>();
        numbers2.Append(5);
        numbers2.Append(9);
        String res="{5} ->{9} -> NULL";
        assertEquals(res,numbers.zipLists(numbers,numbers2).toString());
    }
    @Test void zipLists6Test(){
        LinkedList<Integer> numbers = new LinkedList<>();
        LinkedList<Integer> numbers2 = new LinkedList<>();
        assertNull(numbers.zipLists(numbers, numbers2));
    }
}
