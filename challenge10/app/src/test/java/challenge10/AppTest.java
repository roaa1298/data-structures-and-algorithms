/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge10;

import challenge10.AnimalShelter.AnimalShelter;
import challenge10.AnimalShelter.Cat;
import challenge10.AnimalShelter.Dog;
import challenge10.Trees.data.BTNode;
import challenge10.Trees.structure.BinarySearchTree;
import challenge10.Trees.structure.BinaryTree;
import challenge10.pseudoQueue.pseudoQueue;
import challenge10.queue.structure.Queue;
import challenge10.stack.structure.Stack;
import challenge10.validateBrackets.ValidateBrackets;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;

import static challenge10.Trees.structure.BinaryTree.TraversalOrder.*;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void stackPushTest(){
        Stack newStack=new Stack();
        newStack.push("1");
        assertEquals(1,newStack.getSize());
    }
    @Test void stackMultiplePushTest(){
        Stack newStack=new Stack();
        newStack.push("1");
        newStack.push("2");
        newStack.push("3");
        newStack.push("4");
        newStack.push("5");
        assertEquals(5,newStack.getSize());
    }
    @Test void stackPopTest() throws Exception {
        Stack newStack=new Stack();
        newStack.push("1");
        newStack.push("2");
        newStack.push("3");
        newStack.push("4");
        newStack.push("5");
        System.out.println(newStack.pop());
        assertEquals(4,newStack.getSize());
    }
    @Test void stackMultiplePopTest() throws Exception {
        Stack newStack=new Stack();
        newStack.push("1");
        newStack.push("2");
        newStack.push("3");
        newStack.push("4");
        newStack.push("5");
        System.out.println(newStack.pop());
        System.out.println(newStack.pop());
        System.out.println(newStack.pop());
        System.out.println(newStack.pop());
        System.out.println(newStack.pop());
        assertEquals(0,newStack.getSize());
    }
    @Test void stackPeekTest() throws Exception {
        Stack newStack=new Stack();
        newStack.push("1");
        newStack.push("2");
        newStack.push("3");
        newStack.push("4");
        newStack.push("5");
        System.out.println(newStack.peek());
        assertEquals("5",newStack.peek());
    }
    @Test void stackEmptyTest(){
        Stack newStack=new Stack();
        assertNull(newStack.getTop());
    }
    @Test void stackEmptyPopTest()  {
        assertThrows(Exception.class, () -> {
            Stack newStack=new Stack();
            newStack.pop();
        });
    }
    @Test void stackEmptyPeekTest(){
        assertThrows(Exception.class, () -> {
            Stack newStack=new Stack();
            String val=newStack.peek();
        });
    }
    @Test void queueEnqueueTest(){
        Queue newQueue=new Queue();
        newQueue.enqueue("1");
        assertEquals(1,newQueue.getSize());
    }
    @Test void queueEnqueueMultipleTest(){
        Queue newQueue=new Queue();
        newQueue.enqueue("1");
        newQueue.enqueue("2");
        newQueue.enqueue("3");
        newQueue.enqueue("4");
        newQueue.enqueue("5");
        assertEquals(5,newQueue.getSize());
    }
    @Test void DequeueTest() throws Exception {
        Queue newQueue=new Queue();
        newQueue.enqueue("1");
        newQueue.enqueue("2");
        newQueue.enqueue("3");
        newQueue.enqueue("4");
        newQueue.enqueue("5");
        System.out.println(newQueue.dequeue());
        assertEquals(4,newQueue.getSize());
    }
    @Test void queuePeekTest() throws Exception {
        Queue newQueue=new Queue();
        newQueue.enqueue("1");
        newQueue.enqueue("2");
        newQueue.enqueue("3");
        newQueue.enqueue("4");
        newQueue.enqueue("5");
        System.out.println(newQueue.peek());
        assertEquals("1",newQueue.peek());
    }
    @Test void DequeueMultipleTest() throws Exception {
        Queue newQueue=new Queue();
        newQueue.enqueue("1");
        newQueue.enqueue("2");
        newQueue.enqueue("3");
        newQueue.enqueue("4");
        newQueue.enqueue("5");
        System.out.println(newQueue.dequeue());
        System.out.println(newQueue.dequeue());
        System.out.println(newQueue.dequeue());
        System.out.println(newQueue.dequeue());
        System.out.println(newQueue.dequeue());
        assertEquals(0,newQueue.getSize());
    }
    @Test void EmptyQueueTest(){
        Queue newQueue=new Queue();
        assertNull(newQueue.getFront());
    }
    @Test void queueEmptyPeekTest(){
        assertThrows(Exception.class, () -> {
            Queue newQueue=new Queue();
            String val=newQueue.peek();
            System.out.println(val);
        });
    }
    @Test void queueEmptyDequeueTest(){
        assertThrows(Exception.class, () -> {
            Queue newQueue=new Queue();
            String val=newQueue.dequeue();
            System.out.println(val);
        });
    }
    @Test void pseudoQueueTest() throws Exception {
        pseudoQueue newQueue=new pseudoQueue();
        newQueue.enQueue("1");
        newQueue.enQueue("2");
        newQueue.enQueue("3");
        newQueue.enQueue("4");

        assertEquals("1",newQueue.getS1().getTop().getValue());
    }
    @Test void pseudoDequeueTest() throws Exception {
        pseudoQueue newQueue=new pseudoQueue();
        newQueue.enQueue("1");
        newQueue.enQueue("2");
        newQueue.enQueue("3");
        newQueue.enQueue("4");
        String last=newQueue.deQueue();
        assertEquals("1",last);
    }

    @Test void animalShelterTest() throws Exception {
        AnimalShelter animal=new AnimalShelter();
        animal.enQueue(new Cat("cat1"));
        animal.enQueue(new Dog("dog1"));
        animal.enQueue(new Cat("cat2"));
        animal.enQueue(new Dog("dog2"));
        animal.enQueue(new Cat("cat3"));

        assertEquals("cat1",animal.deQueue("cat"));
    }
    @Test void animalShelterSizeTest() throws Exception {
        AnimalShelter animal=new AnimalShelter();
        animal.enQueue(new Cat("cat1"));
        animal.enQueue(new Dog("dog1"));
        animal.enQueue(new Cat("cat2"));
        animal.enQueue(new Dog("dog2"));
        animal.enQueue(new Cat("cat3"));

        assertEquals(5,animal.getSize());
    }
    @Test void animalShelterEmptyTest() throws Exception {
        AnimalShelter animal=new AnimalShelter();
        animal.enQueue(new Dog("dog1"));
        animal.enQueue(new Dog("dog2"));

        assertNull(animal.deQueue("cat"));
    }
    @Test void validateBracketsTrueTest(){
        String str="{}{Code}[Fellows](())";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(true,ob.validateBrackets(str));
    }
    @Test void validateBracketsTrue2Test(){
        String str="{}";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(true,ob.validateBrackets(str));
    }
    @Test void validateBracketsTrue3Test(){
        String str="{}(){}";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(true,ob.validateBrackets(str));
    }
    @Test void validateBracketsTrue4Test(){
        String str="()[[Extra Characters]]";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(true,ob.validateBrackets(str));
    }
    @Test void validateBracketsTrue5Test(){
        String str="(){}[[]]";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(true,ob.validateBrackets(str));
    }
    @Test void validateBracketsFalse1Test(){
        String str="[({}]";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(false,ob.validateBrackets(str));
    }
    @Test void validateBracketsFalse2Test(){
        String str=")";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(false,ob.validateBrackets(str));
    }
    @Test void validateBracketsFalse3Test(){
        String str="(](";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(false,ob.validateBrackets(str));
    }
    @Test void validateBracketsFalse4Test(){
        String str="{(})";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(false,ob.validateBrackets(str));
    }
    @Test void validateBracketsFalse5Test(){
        String str="{";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(false,ob.validateBrackets(str));
    }
    @Test void validateBracketsFalse6Test(){
        String str="[}";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(false,ob.validateBrackets(str));
    }

    @Test void EmptyBinaryTreeTest(){
        BinaryTree<Integer> tre=new BinaryTree<>();
        assertNull(tre.getRoot());
    }
    @Test void BinaryTreeTest(){
        BinaryTree<Integer> tre=new BinaryTree<>(9);
        assertNotNull(tre.getRoot());
    }
    @Test void BinarySearchTreeLeftTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        assertEquals(4,newTree.getRoot().getLeftNode().getData());
    }
    @Test void BinarySearchTreeRightTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        assertEquals(8,newTree.getRoot().getRightNode().getData());
    }
    @Test void BinarySearchTreeRootTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        assertEquals(5,newTree.getRoot().getData());
    }
    @Test void BinarySearchTreeAddTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.getRoot().setLeftNode(new BTNode<Integer>(8) {
            @Override
            public int compareTo(BTNode<Integer> o) {
                return 0;
            }
        });
        newTree.getRoot().setRightNode(new BTNode<Integer>(4) {
            @Override
            public int compareTo(BTNode<Integer> o) {
                return 0;
            }
        });
        assertEquals(8,newTree.getRoot().getLeftNode().getData());
    }
    @Test void BinarySearchTreePreorderTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertEquals("[5, 4, 3, 8, 90, 55]",newTree.traverse(PREORDER).toString());
    }
    @Test void BinarySearchTreeInorderTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertEquals("[3, 4, 5, 8, 55, 90]",newTree.traverse(INORDER).toString());
    }
    @Test void BinarySearchTreePostorderTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertEquals("[3, 4, 55, 90, 8, 5]",newTree.traverse(POSTORDER).toString());
    }
    @Test void BinarySearchTreeContainsTrueTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertTrue(newTree.Contains(90));
    }
    @Test void BinarySearchTreeContainsFalseTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertFalse(newTree.Contains(9));
    }
    @Test void BinarySearchTreeSizeTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertEquals(6,newTree.getSize()); //it gives me 6 because binary search tree doesn't add redundant value
    }

}
