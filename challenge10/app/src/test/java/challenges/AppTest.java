/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenges;

import challenges.AnimalShelter.AnimalShelter;
import challenges.AnimalShelter.Cat;
import challenges.AnimalShelter.Dog;
import challenges.BusinessTrip.BusinessTrip;
import challenges.Graph.Graph;
import challenges.Graph.Vertex;
import challenges.HashMap.Structure.HashMap;
import challenges.InsertionSort.InsertionSort;
import challenges.LeftJoin.LeftJoin;
import challenges.MergeSort.MergeSort;
import challenges.QuickSort.QuickSort;
import challenges.RepeatedWord.RepeatedWord;
import challenges.TreeIntersection.TreeIntersection;
import challenges.Trees.data.BTNode;
import challenges.Trees.structure.BinarySearchTree;
import challenges.Trees.structure.BinaryTree;
import challenges.pseudoQueue.pseudoQueue;
import challenges.queue.structure.Queue;
import challenges.stack.structure.Stack;
import challenges.validateBrackets.ValidateBrackets;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static challenges.Trees.structure.BinaryTree.TraversalOrder.*;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void stackPushTest(){
        Stack newStack=new Stack();
        newStack.push("1");
        assertEquals(1,newStack.getSize());
    }
    @Test void stackMultiplePushTest(){
        Stack newStack=new Stack();
        newStack.push("1");
        newStack.push("2");
        newStack.push("3");
        newStack.push("4");
        newStack.push("5");
        assertEquals(5,newStack.getSize());
    }
    @Test void stackPopTest() throws Exception {
        Stack newStack=new Stack();
        newStack.push("1");
        newStack.push("2");
        newStack.push("3");
        newStack.push("4");
        newStack.push("5");
        System.out.println(newStack.pop());
        assertEquals(4,newStack.getSize());
    }
    @Test void stackMultiplePopTest() throws Exception {
        Stack newStack=new Stack();
        newStack.push("1");
        newStack.push("2");
        newStack.push("3");
        newStack.push("4");
        newStack.push("5");
        System.out.println(newStack.pop());
        System.out.println(newStack.pop());
        System.out.println(newStack.pop());
        System.out.println(newStack.pop());
        System.out.println(newStack.pop());
        assertEquals(0,newStack.getSize());
    }
    @Test void stackPeekTest() throws Exception {
        Stack newStack=new Stack();
        newStack.push("1");
        newStack.push("2");
        newStack.push("3");
        newStack.push("4");
        newStack.push("5");
        System.out.println(newStack.peek());
        assertEquals("5",newStack.peek());
    }
    @Test void stackEmptyTest(){
        Stack newStack=new Stack();
        assertNull(newStack.getTop());
    }
    @Test void stackEmptyPopTest()  {
        assertThrows(Exception.class, () -> {
            Stack newStack=new Stack();
            newStack.pop();
        });
    }
    @Test void stackEmptyPeekTest(){
        assertThrows(Exception.class, () -> {
            Stack newStack=new Stack();
            String val=newStack.peek();
        });
    }
    @Test void queueEnqueueTest(){
        Queue<String> newQueue=new Queue<String>();
        newQueue.enqueue("1");
        assertEquals(1,newQueue.getSize());
    }
    @Test void queueEnqueueMultipleTest(){
        Queue<String> newQueue=new Queue<>();
        newQueue.enqueue("1");
        newQueue.enqueue("2");
        newQueue.enqueue("3");
        newQueue.enqueue("4");
        newQueue.enqueue("5");
        assertEquals(5,newQueue.getSize());
    }
    @Test void DequeueTest() throws Exception {
        Queue<String> newQueue=new Queue<String>();
        newQueue.enqueue("1");
        newQueue.enqueue("2");
        newQueue.enqueue("3");
        newQueue.enqueue("4");
        newQueue.enqueue("5");
        System.out.println(newQueue.dequeue());
        assertEquals(4,newQueue.getSize());
    }
    @Test void queuePeekTest() throws Exception {
        Queue<String> newQueue=new Queue<>();
        newQueue.enqueue("1");
        newQueue.enqueue("2");
        newQueue.enqueue("3");
        newQueue.enqueue("4");
        newQueue.enqueue("5");
        System.out.println(newQueue.peek());
        assertEquals("1",newQueue.peek());
    }
    @Test void DequeueMultipleTest() throws Exception {
        Queue<String> newQueue=new Queue<String>();
        newQueue.enqueue("1");
        newQueue.enqueue("2");
        newQueue.enqueue("3");
        newQueue.enqueue("4");
        newQueue.enqueue("5");
        System.out.println(newQueue.dequeue());
        System.out.println(newQueue.dequeue());
        System.out.println(newQueue.dequeue());
        System.out.println(newQueue.dequeue());
        System.out.println(newQueue.dequeue());
        assertEquals(0,newQueue.getSize());
    }
    @Test void EmptyQueueTest(){
        Queue<String> newQueue=new Queue<>();
        assertNull(newQueue.getFront());
    }
    @Test void queueEmptyPeekTest(){
        assertThrows(Exception.class, () -> {
            Queue<String> newQueue=new Queue<>();
            String val=newQueue.peek();
            System.out.println(val);
        });
    }
    @Test void queueEmptyDequeueTest(){
        assertThrows(Exception.class, () -> {
            Queue<String> newQueue=new Queue<>();
            String val=newQueue.dequeue();
            System.out.println(val);
        });
    }
    @Test void pseudoQueueTest() throws Exception {
        pseudoQueue newQueue=new pseudoQueue();
        newQueue.enQueue("1");
        newQueue.enQueue("2");
        newQueue.enQueue("3");
        newQueue.enQueue("4");

        assertEquals("1",newQueue.getS1().getTop().getValue());
    }
    @Test void pseudoDequeueTest() throws Exception {
        pseudoQueue newQueue=new pseudoQueue();
        newQueue.enQueue("1");
        newQueue.enQueue("2");
        newQueue.enQueue("3");
        newQueue.enQueue("4");
        String last=newQueue.deQueue();
        assertEquals("1",last);
    }

    @Test void animalShelterTest() throws Exception {
        AnimalShelter<String> animal=new AnimalShelter<>();
        animal.enQueue(new Cat<>("cat1"));
        animal.enQueue(new Dog<>("dog1"));
        animal.enQueue(new Cat<>("cat2"));
        animal.enQueue(new Dog<>("dog2"));
        animal.enQueue(new Cat<>("cat3"));

        assertEquals("cat1",animal.deQueue("cat").getValue());
    }
    @Test void animalShelterSizeTest() throws Exception {
        AnimalShelter<String> animal=new AnimalShelter<>();
        animal.enQueue(new Cat<>("cat1"));
        animal.enQueue(new Dog<>("dog1"));
        animal.enQueue(new Cat<>("cat2"));
        animal.enQueue(new Dog<>("dog2"));
        animal.enQueue(new Cat<>("cat3"));

        assertEquals(5,animal.getSize());
    }
    @Test void animalShelterEmptyTest() throws Exception {
        AnimalShelter<String> animal=new AnimalShelter<>();
        animal.enQueue(new Dog<>("dog1"));
        animal.enQueue(new Dog<>("dog2"));

        assertNull(animal.deQueue("cat"));
    }
    @Test void validateBracketsTrueTest(){
        String str="{}{Code}[Fellows](())";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(true,ob.validateBrackets(str));
    }
    @Test void validateBracketsTrue2Test(){
        String str="{}";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(true,ob.validateBrackets(str));
    }
    @Test void validateBracketsTrue3Test(){
        String str="{}(){}";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(true,ob.validateBrackets(str));
    }
    @Test void validateBracketsTrue4Test(){
        String str="()[[Extra Characters]]";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(true,ob.validateBrackets(str));
    }
    @Test void validateBracketsTrue5Test(){
        String str="(){}[[]]";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(true,ob.validateBrackets(str));
    }
    @Test void validateBracketsFalse1Test(){
        String str="[({}]";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(false,ob.validateBrackets(str));
    }
    @Test void validateBracketsFalse2Test(){
        String str=")";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(false,ob.validateBrackets(str));
    }
    @Test void validateBracketsFalse3Test(){
        String str="(](";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(false,ob.validateBrackets(str));
    }
    @Test void validateBracketsFalse4Test(){
        String str="{(})";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(false,ob.validateBrackets(str));
    }
    @Test void validateBracketsFalse5Test(){
        String str="{";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(false,ob.validateBrackets(str));
    }
    @Test void validateBracketsFalse6Test(){
        String str="[}";
        ValidateBrackets ob=new ValidateBrackets();
        assertEquals(false,ob.validateBrackets(str));
    }

    @Test void EmptyBinaryTreeTest(){
        BinaryTree<Integer> tre=new BinaryTree<>();
        assertNull(tre.getRoot());
    }
    @Test void BinaryTreeTest(){
        BinaryTree<Integer> tre=new BinaryTree<>(9);
        assertNotNull(tre.getRoot());
    }
    @Test void BinarySearchTreeLeftTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        assertEquals(4,newTree.getRoot().getLeftNode().getData());
    }
    @Test void BinarySearchTreeRightTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        assertEquals(8,newTree.getRoot().getRightNode().getData());
    }
    @Test void BinarySearchTreeRootTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        assertEquals(5,newTree.getRoot().getData());
    }
    @Test void BinarySearchTreeAddTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.getRoot().setLeftNode(new BTNode<Integer>(8) {
            @Override
            public int compareTo(BTNode<Integer> o) {
                return 0;
            }
        });
        newTree.getRoot().setRightNode(new BTNode<Integer>(4) {
            @Override
            public int compareTo(BTNode<Integer> o) {
                return 0;
            }
        });
        assertEquals(8,newTree.getRoot().getLeftNode().getData());
    }
    @Test void BinarySearchTreePreorderTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertEquals("[5, 4, 3, 8, 90, 55]",newTree.traverse(PREORDER).toString());
    }
    @Test void BinarySearchTreeInorderTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertEquals("[3, 4, 5, 8, 55, 90]",newTree.traverse(INORDER).toString());
    }
    @Test void BinarySearchTreePostorderTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertEquals("[3, 4, 55, 90, 8, 5]",newTree.traverse(POSTORDER).toString());
    }
    @Test void BinarySearchTreeContainsTrueTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertTrue(newTree.Contains(90));
    }
    @Test void BinarySearchTreeContainsFalseTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertFalse(newTree.Contains(9));
    }
    @Test void BinarySearchTreeSizeTest(){
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertEquals(6,newTree.getSize()); //it gives me 6 because binary search tree doesn't add redundant value
    }

    @Test void breadthFirstTest() throws Exception {
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        assertEquals("[5, 4, 8, 3, 90, 55]",newTree.breadthFirst().toString());
    }
    @Test void breadthFirstEmptyTest() throws Exception {
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();

        assertNull(newTree.breadthFirst());
    }
    @Test void maxTreeTest(){
        BinaryTree<Integer> maxTree=new BinaryTree<Integer>();
        BTNode<Integer> node1=new BTNode<Integer>(2);
        maxTree.setRoot(node1);

        node1.setLeftNode(new BTNode<Integer>(7));
        node1.setRightNode(new BTNode<Integer>(5));

        node1.getLeftNode().setLeftNode(new BTNode<Integer>(2));
        node1.getLeftNode().setRightNode(new BTNode<Integer>(6));

        node1.getLeftNode().getRightNode().setLeftNode(new BTNode<Integer>(5));
        node1.getLeftNode().getRightNode().setRightNode(new BTNode<Integer>(11));

        node1.getRightNode().setRightNode(new BTNode<Integer>(9));
        node1.getRightNode().getRightNode().setLeftNode(new BTNode<Integer>(4));

        assertEquals(11,maxTree.getMaxNum());
    }
    @Test void maxTreeEmptyTest(){
        BinaryTree<Integer> maxTree=new BinaryTree<Integer>();
        assertNull(maxTree.getMaxNum());
    }
    @Test void maxTreeOneNumTest(){
        BinaryTree<Integer> maxTree=new BinaryTree<Integer>();
        BTNode<Integer> node1=new BTNode<Integer>(2);
        maxTree.setRoot(node1);
        assertEquals(2,maxTree.getMaxNum());
    }

    @Test void maxTreeNegativeTest(){
        BinaryTree<Integer> maxTree=new BinaryTree<Integer>();
        BTNode<Integer> node1=new BTNode<Integer>(-2);
        maxTree.setRoot(node1);

        node1.setLeftNode(new BTNode<Integer>(-7));
        node1.setRightNode(new BTNode<Integer>(-5));

        node1.getLeftNode().setLeftNode(new BTNode<Integer>(-2));
        node1.getLeftNode().setRightNode(new BTNode<Integer>(-6));

        node1.getLeftNode().getRightNode().setLeftNode(new BTNode<Integer>(-5));
        node1.getLeftNode().getRightNode().setRightNode(new BTNode<Integer>(-11));

        node1.getRightNode().setRightNode(new BTNode<Integer>(-9));
        node1.getRightNode().getRightNode().setLeftNode(new BTNode<Integer>(-4));

        assertEquals(-2,maxTree.getMaxNum());
    }
    @Test void fizzbuzzTest(){
        BinaryTree<Integer> fizzbuzz=new BinaryTree<>();
        fizzbuzz.setRoot(new BTNode<>(5));
        fizzbuzz.getRoot().setLeftNode(new BTNode<>(4));
        fizzbuzz.getRoot().setRightNode(new BTNode<>(3));
        fizzbuzz.getRoot().getLeftNode().setLeftNode(new BTNode<>(15));
        fizzbuzz.getRoot().getLeftNode().setRightNode(new BTNode<>(9));
        fizzbuzz.getRoot().getRightNode().setLeftNode(new BTNode<>(6));
        fizzbuzz.getRoot().getRightNode().setRightNode(new BTNode<>(7));
        System.out.println(fizzbuzz.fizzbuzzTree(fizzbuzz));
        assertEquals("Buzz",fizzbuzz.fizzbuzzTree(fizzbuzz).getRoot().getData());
    }
    @Test void fizzbuzzLeftNodeTest(){
        BinaryTree<Integer> fizzbuzz=new BinaryTree<>();
        fizzbuzz.setRoot(new BTNode<>(5));
        fizzbuzz.getRoot().setLeftNode(new BTNode<>(4));
        fizzbuzz.getRoot().setRightNode(new BTNode<>(3));
        fizzbuzz.getRoot().getLeftNode().setLeftNode(new BTNode<>(15));
        fizzbuzz.getRoot().getLeftNode().setRightNode(new BTNode<>(9));
        fizzbuzz.getRoot().getRightNode().setLeftNode(new BTNode<>(6));
        fizzbuzz.getRoot().getRightNode().setRightNode(new BTNode<>(7));
        System.out.println(fizzbuzz.fizzbuzzTree(fizzbuzz));
        assertEquals("4",fizzbuzz.fizzbuzzTree(fizzbuzz).getRoot().getLeftNode().getData());
    }
    @Test void fizzbuzzNullTest(){
        BinaryTree<Integer> fizzbuzz=new BinaryTree<>();

        System.out.println(fizzbuzz.fizzbuzzTree(fizzbuzz));
        assertNull(fizzbuzz.fizzbuzzTree(fizzbuzz).getRoot().getData());
    }
    @Test void InsertionTest(){
        int[] ar={8,4,23,42,16,15};
        InsertionSort sortedArray=new InsertionSort();
        System.out.println(Arrays.toString(sortedArray.Insertion(ar)));
        assertEquals("[4, 8, 15, 16, 23, 42]",Arrays.toString(sortedArray.Insertion(ar)));
    }

    @Test void MergeTest(){
        int[] ar2={8,4,23,42,16,15};
        MergeSort mergeSort=new MergeSort();
        System.out.println(Arrays.toString(mergeSort.Mergesort(ar2)));
        assertEquals("[4, 8, 15, 16, 23, 42]",Arrays.toString(mergeSort.Mergesort(ar2)));
    }
    @Test void MergeOneTest(){
        int[] ar2={8};
        MergeSort mergeSort=new MergeSort();
        System.out.println(Arrays.toString(mergeSort.Mergesort(ar2)));
        assertEquals("[8]",Arrays.toString(mergeSort.Mergesort(ar2)));
    }
    @Test void MergeEmptyTest(){
        int[] ar2={};
        MergeSort mergeSort=new MergeSort();
        System.out.println(Arrays.toString(mergeSort.Mergesort(ar2)));
        assertEquals("[]",Arrays.toString(mergeSort.Mergesort(ar2)));
    }

    @Test void QuickTest(){
        int[] ar3={8,4,23,42,16,15};
        QuickSort quickSort=new QuickSort();
        quickSort.quickSort(ar3,0,ar3.length-1);
        System.out.println("sorted by quick sort algorithm= "+ Arrays.toString(ar3));
        assertEquals("[4, 8, 15, 16, 23, 42]",Arrays.toString(ar3));
    }
    @Test void QuickEmptyTest(){
        int[] ar3={};
        QuickSort quickSort=new QuickSort();
        quickSort.quickSort(ar3,0,ar3.length-1);
        System.out.println("sorted by quick sort algorithm= "+ Arrays.toString(ar3));
        assertEquals("[]",Arrays.toString(ar3));
    }
    // --------------------------- Hash map -------------------------------------------------------
    @Test void putToHashMapTest(){
        HashMap<String, String> hashMap=new HashMap<>();
        hashMap.put("java","java");
        hashMap.put("python","python");
        hashMap.put("kotlin","kotlin");
        hashMap.put("js","js");
        hashMap.put("html","html");
        hashMap.put("css","css");
        hashMap.put("php","php");
        hashMap.put("c","c");

        System.out.println("------------------ hash table test -------------------------------------");
        System.out.println("After adding 8 elements in the hash table= "+hashMap.getBucketArray());
        assertEquals(8,hashMap.getSize());
    }
    @Test void getFromHashTableTest() {
        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put("java", "java");
        hashMap.put("python", "python");
        hashMap.put("kotlin", "kotlin");
        hashMap.put("js", "js");
        hashMap.put("html", "html");
        hashMap.put("css", "css");
        hashMap.put("php", "php");
        hashMap.put("c", "c");

        assertEquals("kotlin", hashMap.get("kotlin"));
    }

    @Test void getNullFromHashTableTest() {
        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put("java", "java");
        hashMap.put("python", "python");
        hashMap.put("kotlin", "kotlin");
        hashMap.put("js", "js");
        hashMap.put("html", "html");
        hashMap.put("css", "css");
        hashMap.put("php", "php");
        hashMap.put("c", "c");

        assertNull(hashMap.get("anythingElse"));
    }
    @Test void getListOfTheKeysFromHashTableTest() {
        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put("java", "java");
        hashMap.put("python", "python");
        hashMap.put("kotlin", "kotlin");
        hashMap.put("js", "js");
        hashMap.put("html", "html");
        hashMap.put("css", "css");
        hashMap.put("php", "php");
        hashMap.put("c", "c");

        assertEquals("[js, html, php, python, java, c, kotlin, css]",hashMap.keys().toString());
    }

    @Test void getFromBucketThatHasCollisionTest() {
        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put("java", "java");
        hashMap.put("python", "python");
        hashMap.put("kotlin", "kotlin");
        hashMap.put("js", "js");
        hashMap.put("html", "html");
        hashMap.put("css", "css");
        hashMap.put("php", "php");
        hashMap.put("c", "c");

        // css located in the last index that has 3 nodes, and it's the last node in the linked list
        assertEquals("css", hashMap.get("css"));
    }
    @Test void getIndexForKeyInTheHashTableTest() {
        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put("java", "java");
        hashMap.put("python", "python");
        hashMap.put("kotlin", "kotlin");
        hashMap.put("js", "js");
        hashMap.put("html", "html");
        hashMap.put("css", "css");
        hashMap.put("php", "php");
        hashMap.put("c", "c");

        assertEquals(19, hashMap.hash("css"));
    }

    @Test void getListOfTheKeysFromEmptyHashTableTest() {
        HashMap<String, String> hashMap2 = new HashMap<>();

        assertEquals("[]",hashMap2.keys().toString());
    }
    @Test void getIndexForKeyNotInTheHashTableTest() {
        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put("java", "java");
        hashMap.put("python", "python");
        hashMap.put("kotlin", "kotlin");
        hashMap.put("js", "js");
        hashMap.put("html", "html");
        hashMap.put("css", "css");
        hashMap.put("php", "php");
        hashMap.put("c", "c");

        assertNull(hashMap.hash("C++"));
    }
    @Test void repeatedWordTest(){
        RepeatedWord newString=new RepeatedWord();
//        System.out.println("the repeated word: "+newString.repeatedWord("Once upon a time, there was a brave princess who"));

        assertEquals("a",newString.repeatedWord("Once upon a time, there was a brave princess who"));
    }

    @Test void repeatedWordUpperCaseAndLowerCaseMatchTest(){
        RepeatedWord newString=new RepeatedWord();
//        System.out.println("the repeated word: "+newString.repeatedWord("It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only"));

        assertEquals("it",newString.repeatedWord("It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only"));
    }

    @Test void repeatedWordRemoveCommasTest(){
        RepeatedWord newString=new RepeatedWord();
//        System.out.println("the repeated word: "+newString.repeatedWord("It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York"));

        assertEquals("summer",newString.repeatedWord("It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York"));
    }
    @Test void repeatedWordNullTest(){
        RepeatedWord newString=new RepeatedWord();

        assertNull(newString.repeatedWord("Once upon a time, there was brave princess who"));
    }
    @Test void wordsCountTest(){
        RepeatedWord newString=new RepeatedWord();

        assertEquals(2,newString.wordsCount("Once upon a time, there was a brave princess who").get("a"));
    }
    @Test void treeIntersectionTest(){
        TreeIntersection treeIntersection=new TreeIntersection();
        BinarySearchTree<Integer> tree1=new BinarySearchTree<>();
        BinarySearchTree<Integer> tree2=new BinarySearchTree<>();

        tree1.setRoot(new BTNode<>(150));
        tree1.getRoot().setLeftNode(new BTNode<>(100));
        tree1.getRoot().setRightNode(new BTNode<>(250));

        tree1.getRoot().getLeftNode().setLeftNode(new BTNode<>(75));
        tree1.getRoot().getLeftNode().setRightNode(new BTNode<>(160));

        tree1.getRoot().getRightNode().setLeftNode(new BTNode<>(200));
        tree1.getRoot().getRightNode().setRightNode(new BTNode<>(350));

        tree1.getRoot().getLeftNode().getRightNode().setLeftNode(new BTNode<>(125));
        tree1.getRoot().getLeftNode().getRightNode().setRightNode(new BTNode<>(175));

        tree1.getRoot().getRightNode().getRightNode().setLeftNode(new BTNode<>(300));
        tree1.getRoot().getRightNode().getRightNode().setRightNode(new BTNode<>(500));
        // -------------------------------------  Tree2  -----------------------------------------
        tree2.setRoot(new BTNode<>(42));
        tree2.getRoot().setLeftNode(new BTNode<>(100));
        tree2.getRoot().setRightNode(new BTNode<>(600));

        tree2.getRoot().getLeftNode().setLeftNode(new BTNode<>(15));
        tree2.getRoot().getLeftNode().setRightNode(new BTNode<>(160));

        tree2.getRoot().getRightNode().setLeftNode(new BTNode<>(200));
        tree2.getRoot().getRightNode().setRightNode(new BTNode<>(350));

        tree2.getRoot().getLeftNode().getRightNode().setLeftNode(new BTNode<>(125));
        tree2.getRoot().getLeftNode().getRightNode().setRightNode(new BTNode<>(175));

        tree2.getRoot().getRightNode().getRightNode().setLeftNode(new BTNode<>(4));
        tree2.getRoot().getRightNode().getRightNode().setRightNode(new BTNode<>(500));

        // Test treeIntersection method
        assertEquals("[100, 160, 125, 175, 200, 350, 500]",treeIntersection.tree_intersection(tree1,tree2).toString());
    }
    @Test void emptyTreeTest(){
        TreeIntersection treeIntersection=new TreeIntersection();
        BinarySearchTree<Integer> tree1=new BinarySearchTree<>();
        BinarySearchTree<Integer> tree2=new BinarySearchTree<>();

        tree1.setRoot(new BTNode<>(150));
        tree1.getRoot().setLeftNode(new BTNode<>(100));
        tree1.getRoot().setRightNode(new BTNode<>(250));

        tree1.getRoot().getLeftNode().setLeftNode(new BTNode<>(75));
        tree1.getRoot().getLeftNode().setRightNode(new BTNode<>(160));

        tree1.getRoot().getRightNode().setLeftNode(new BTNode<>(200));
        tree1.getRoot().getRightNode().setRightNode(new BTNode<>(350));

        tree1.getRoot().getLeftNode().getRightNode().setLeftNode(new BTNode<>(125));
        tree1.getRoot().getLeftNode().getRightNode().setRightNode(new BTNode<>(175));

        tree1.getRoot().getRightNode().getRightNode().setLeftNode(new BTNode<>(300));
        tree1.getRoot().getRightNode().getRightNode().setRightNode(new BTNode<>(500));

        // Test
        assertNull(treeIntersection.tree_intersection(tree1, tree2));
    }
    @Test void noMatchingElementsTest(){
        TreeIntersection treeIntersection=new TreeIntersection();
        BinarySearchTree<Integer> tree3=new BinarySearchTree<>();
        BinarySearchTree<Integer> tree4=new BinarySearchTree<>();

        tree3.setRoot(new BTNode<>(1));
        tree3.getRoot().setLeftNode(new BTNode<>(2));
        tree3.getRoot().setRightNode(new BTNode<>(3));

        tree3.getRoot().getLeftNode().setLeftNode(new BTNode<>(4));
        tree3.getRoot().getLeftNode().setRightNode(new BTNode<>(5));

        tree3.getRoot().getRightNode().setLeftNode(new BTNode<>(6));
        tree3.getRoot().getRightNode().setRightNode(new BTNode<>(7));

        tree3.getRoot().getLeftNode().getRightNode().setLeftNode(new BTNode<>(8));
        tree3.getRoot().getLeftNode().getRightNode().setRightNode(new BTNode<>(9));

        tree3.getRoot().getRightNode().getRightNode().setLeftNode(new BTNode<>(10));
        tree3.getRoot().getRightNode().getRightNode().setRightNode(new BTNode<>(11));
        // -------------------------------------  Tree2  -----------------------------------------
        tree4.setRoot(new BTNode<>(12));
        tree4.getRoot().setLeftNode(new BTNode<>(13));
        tree4.getRoot().setRightNode(new BTNode<>(14));

        tree4.getRoot().getLeftNode().setLeftNode(new BTNode<>(15));
        tree4.getRoot().getLeftNode().setRightNode(new BTNode<>(16));

        tree4.getRoot().getRightNode().setLeftNode(new BTNode<>(17));
        tree4.getRoot().getRightNode().setRightNode(new BTNode<>(18));

        tree4.getRoot().getLeftNode().getRightNode().setLeftNode(new BTNode<>(19));
        tree4.getRoot().getLeftNode().getRightNode().setRightNode(new BTNode<>(20));

        tree4.getRoot().getRightNode().getRightNode().setLeftNode(new BTNode<>(21));
        tree4.getRoot().getRightNode().getRightNode().setRightNode(new BTNode<>(22));

        // Test
        assertEquals("[]",treeIntersection.tree_intersection(tree3,tree4).toString());
    }

    @Test void leftJoinTest(){
        LeftJoin tables=new LeftJoin();
        HashMap<String, String> hash1=new HashMap<>();
        hash1.put("diligent","employed");
        hash1.put("fond","enamored");
        hash1.put("guide","usher");
        hash1.put("outfit","garb");
        hash1.put("wrath","anger");

        HashMap<String, String> hash2=new HashMap<>();
        hash2.put("diligent","idle");
        hash2.put("fond","averse");
        hash2.put("guide","follow");
        hash2.put("flow","jam");
        hash2.put("wrath","delight");

        assertEquals("[[wrath, anger, delight], [diligent, employed, idle], [fond, enamored, averse], [guide, usher, follow], [outfit, garb, null]]",tables.leftJoin(hash1,hash2).toString());
    }
    @Test void leftJoinCheckNullTest(){
        LeftJoin tables=new LeftJoin();
        HashMap<String, String> hash1=new HashMap<>();
        hash1.put("diligent","employed");
        hash1.put("fond","enamored");
        hash1.put("guide","usher");
        hash1.put("outfit","garb");
        hash1.put("wrath","anger");

        HashMap<String, String> hash2=new HashMap<>();
        hash2.put("diligent","idle");
        hash2.put("fond","averse");
        hash2.put("guide","follow");
        hash2.put("flow","jam");
        hash2.put("wrath","delight");

        assertNull(tables.leftJoin(hash1, hash2).get(4).get(2));
    }
    @Test void leftJoinTable1EmptyTest(){
        LeftJoin tables=new LeftJoin();
        HashMap<String, String> hash1=new HashMap<>();

        HashMap<String, String> hash2=new HashMap<>();
        hash2.put("diligent","idle");
        hash2.put("fond","averse");
        hash2.put("guide","follow");
        hash2.put("flow","jam");
        hash2.put("wrath","delight");

        assertEquals("[]",tables.leftJoin(hash1,hash2).toString());
    }

    @Test void leftJoinTable2EmptyTest(){
        LeftJoin tables=new LeftJoin();
        HashMap<String, String> hash1=new HashMap<>();
        hash1.put("diligent","employed");
        hash1.put("fond","enamored");
        hash1.put("guide","usher");
        hash1.put("outfit","garb");
        hash1.put("wrath","anger");

        HashMap<String, String> hash2=new HashMap<>();

        assertEquals("[[wrath, anger, null], [diligent, employed, null], [fond, enamored, null], [guide, usher, null], [outfit, garb, null]]",tables.leftJoin(hash1,hash2).toString());
    }

    @Test void addVertexTest(){
        Graph graph=new Graph();
        assertEquals("A",graph.addVertex("A").getData());
    }
    @Test void getNodesTest(){
        Graph graph=new Graph();
        System.out.println(graph.addVertex("A"));
        System.out.println(graph.addVertex("B"));
        System.out.println(graph.addVertex("C"));
        System.out.println(graph.addVertex("D"));

        assertEquals("[Vertex{data='A'}, Vertex{data='B'}, Vertex{data='C'}, Vertex{data='D'}]",graph.getNodes().toString());
    }
    @Test void graphSizeTest(){
        Graph graph=new Graph();
        System.out.println(graph.addVertex("A"));
        System.out.println(graph.addVertex("B"));
        System.out.println(graph.addVertex("C"));
        System.out.println(graph.addVertex("D"));

        graph.addEdges("A","B",4);
        graph.addEdges("A","C",3);
        graph.addEdges("A","D",9);
        graph.addEdges("D","B",5);
        graph.addEdges("C","D",6);

        assertEquals(4,graph.getSize());
    }
    @Test void getNeighborsTest(){
        Graph graph=new Graph();
        System.out.println(graph.addVertex("A"));
        System.out.println(graph.addVertex("B"));
        System.out.println(graph.addVertex("C"));
        System.out.println(graph.addVertex("D"));

        graph.addEdges("A","B",4);
        graph.addEdges("A","C",3);
        graph.addEdges("A","D",9);
        graph.addEdges("D","B",5);
        graph.addEdges("C","D",6);

        assertEquals("[Edge{vertex=Vertex{data='A'}, weight=4}, Edge{vertex=Vertex{data='D'}, weight=5}]",graph.getNeighbors(new Vertex("B")).toString());

    }
    @Test void addRedundantNodeTest(){
        Graph graph=new Graph();
        System.out.println(graph.addVertex("A"));
        System.out.println(graph.addVertex("B"));
        System.out.println(graph.addVertex("C"));
        System.out.println(graph.addVertex("D"));

        graph.addEdges("A","B",4);
        graph.addEdges("A","C",3);
        graph.addEdges("A","D",9);
        graph.addEdges("D","B",5);
        graph.addEdges("C","D",6);

        assertNull(graph.addVertex("D"));
    }
    @Test void addRedundantNodeSizeTest(){
        Graph graph=new Graph();
        System.out.println(graph.addVertex("A"));
        System.out.println(graph.addVertex("B"));
        System.out.println(graph.addVertex("C"));
        System.out.println(graph.addVertex("D"));

        graph.addEdges("A","B",4);
        graph.addEdges("A","C",3);
        graph.addEdges("A","D",9);
        graph.addEdges("D","B",5);
        graph.addEdges("C","D",6);

        graph.addVertex("D");

        assertEquals(4,graph.getSize());
    }
    @Test void notExistsVertexTest(){
        Graph graph=new Graph();
        System.out.println(graph.addVertex("A"));
        System.out.println(graph.addVertex("B"));
        System.out.println(graph.addVertex("C"));
        System.out.println(graph.addVertex("D"));

        graph.addEdges("A","B",4);
        graph.addEdges("A","C",3);
        graph.addEdges("A","D",9);
        graph.addEdges("D","B",5);
        graph.addEdges("C","D",6);

        graph.addEdges("M","B",8);

        assertNull(graph.getNeighbors(new Vertex("M")));
    }
    @Test void addExistsEdgeTest(){
        Graph graph=new Graph();
        System.out.println(graph.addVertex("A"));
        System.out.println(graph.addVertex("B"));
        System.out.println(graph.addVertex("C"));
        System.out.println(graph.addVertex("D"));

        graph.addEdges("A","B",4);
        graph.addEdges("A","C",3);
        graph.addEdges("A","D",9);
        graph.addEdges("D","B",5);
        graph.addEdges("C","D",6);

        System.out.println(graph.getNeighbors(new Vertex("B")));
        graph.addEdges("A","B",8);
        System.out.println(graph.getNeighbors(new Vertex("B")));

        assertEquals(8,graph.getNeighbors(new Vertex("B")).get(0).getWeight());
    }

    @Test void breadthFirstSearchTest(){
        Graph graph=new Graph();
        System.out.println(graph.addVertex("A"));
        System.out.println(graph.addVertex("B"));
        System.out.println(graph.addVertex("C"));
        System.out.println(graph.addVertex("D"));

        graph.addEdges("A","B",4);
        graph.addEdges("A","C",3);
        graph.addEdges("A","D",9);
        graph.addEdges("D","B",5);
        graph.addEdges("C","D",6);

        assertEquals("[Vertex{data='A'}, Vertex{data='B'}, Vertex{data='C'}, Vertex{data='D'}]",graph.bfs(new Vertex("A")).toString());
    }
    @Test void breadthFirstSearchNotExistsNodeTest(){
        Graph graph=new Graph();
        System.out.println(graph.addVertex("A"));
        System.out.println(graph.addVertex("B"));
        System.out.println(graph.addVertex("C"));
        System.out.println(graph.addVertex("D"));

        graph.addEdges("A","B",4);
        graph.addEdges("A","C",3);
        graph.addEdges("A","D",9);
        graph.addEdges("D","B",5);
        graph.addEdges("C","D",6);

        assertEquals("[]",graph.bfs(new Vertex("E")).toString());
    }

    @Test void breadthFirstSearchSingleVertexTest(){
        Graph graph=new Graph();
        System.out.println(graph.addVertex("A"));

        assertEquals("[Vertex{data='A'}]",graph.bfs(new Vertex("A")).toString());
    }

    /////////////////////////////////// Business Trip /////////////////////////////////////////////

    @Test void businessTripTest(){
        BusinessTrip businessTrip=new BusinessTrip();
        Graph graph2=new Graph();
        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstropolis");
        graph2.addVertex("Narnia");
        graph2.addVertex("Naboo");

        graph2.addEdges("Pandora","Arendelle",150);
        graph2.addEdges("Pandora","Metroville",82);
        graph2.addEdges("Arendelle","Metroville",99);
        graph2.addEdges("Arendelle","Monstropolis",42);
        graph2.addEdges("Metroville","Monstropolis",105);
        graph2.addEdges("Naboo","Monstropolis",73);
        graph2.addEdges("Naboo","Metroville",26);
        graph2.addEdges("Naboo","Narnia",250);
        graph2.addEdges("Metroville","Narnia",37);
        List<String> cityNames=new ArrayList<>();
        cityNames.add("Arendelle");
        cityNames.add("Monstropolis");
        cityNames.add("Naboo");

        System.out.println(businessTrip.businessTrip(graph2,cityNames));
        assertEquals(115,businessTrip.businessTrip(graph2,cityNames));
    }

    @Test void businessTrip2Test(){
        BusinessTrip businessTrip=new BusinessTrip();
        Graph graph2=new Graph();
        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstropolis");
        graph2.addVertex("Narnia");
        graph2.addVertex("Naboo");

        graph2.addEdges("Pandora","Arendelle",150);
        graph2.addEdges("Pandora","Metroville",82);
        graph2.addEdges("Arendelle","Metroville",99);
        graph2.addEdges("Arendelle","Monstropolis",42);
        graph2.addEdges("Metroville","Monstropolis",105);
        graph2.addEdges("Naboo","Monstropolis",73);
        graph2.addEdges("Naboo","Metroville",26);
        graph2.addEdges("Naboo","Narnia",250);
        graph2.addEdges("Metroville","Narnia",37);
        List<String> cityNames=new ArrayList<>();
        cityNames.add("Narnia");
        cityNames.add("Arendelle");
        cityNames.add("Naboo");

        System.out.println(businessTrip.businessTrip(graph2,cityNames));
        assertNull(businessTrip.businessTrip(graph2, cityNames));
    }

    @Test void businessTrip3Test(){
        BusinessTrip businessTrip=new BusinessTrip();
        Graph graph2=new Graph();
        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstropolis");
        graph2.addVertex("Narnia");
        graph2.addVertex("Naboo");

        graph2.addEdges("Pandora","Arendelle",150);
        graph2.addEdges("Pandora","Metroville",82);
        graph2.addEdges("Arendelle","Metroville",99);
        graph2.addEdges("Arendelle","Monstropolis",42);
        graph2.addEdges("Metroville","Monstropolis",105);
        graph2.addEdges("Naboo","Monstropolis",73);
        graph2.addEdges("Naboo","Metroville",26);
        graph2.addEdges("Naboo","Narnia",250);
        graph2.addEdges("Metroville","Narnia",37);
        List<String> cityNames=new ArrayList<>();
        cityNames.add("Naboo");
        cityNames.add("Pandora");

        System.out.println(businessTrip.businessTrip(graph2,cityNames));
        assertNull(businessTrip.businessTrip(graph2, cityNames));
    }

    @Test void businessTrip4Test(){
        BusinessTrip businessTrip=new BusinessTrip();
        Graph graph2=new Graph();
        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstropolis");
        graph2.addVertex("Narnia");
        graph2.addVertex("Naboo");

        graph2.addEdges("Pandora","Arendelle",150);
        graph2.addEdges("Pandora","Metroville",82);
        graph2.addEdges("Arendelle","Metroville",99);
        graph2.addEdges("Arendelle","Monstropolis",42);
        graph2.addEdges("Metroville","Monstropolis",105);
        graph2.addEdges("Naboo","Monstropolis",73);
        graph2.addEdges("Naboo","Metroville",26);
        graph2.addEdges("Naboo","Narnia",250);
        graph2.addEdges("Metroville","Narnia",37);
        List<String> cityNames=new ArrayList<>();
        cityNames.add("Metroville");
        cityNames.add("Pandora");

        System.out.println(businessTrip.businessTrip(graph2,cityNames));
        assertEquals(82,businessTrip.businessTrip(graph2,cityNames));
    }
    @Test void cityNotExistsInTheGraphTest(){
        BusinessTrip businessTrip=new BusinessTrip();
        Graph graph2=new Graph();
        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstropolis");
        graph2.addVertex("Narnia");
        graph2.addVertex("Naboo");

        graph2.addEdges("Pandora","Arendelle",150);
        graph2.addEdges("Pandora","Metroville",82);
        graph2.addEdges("Arendelle","Metroville",99);
        graph2.addEdges("Arendelle","Monstropolis",42);
        graph2.addEdges("Metroville","Monstropolis",105);
        graph2.addEdges("Naboo","Monstropolis",73);
        graph2.addEdges("Naboo","Metroville",26);
        graph2.addEdges("Naboo","Narnia",250);
        graph2.addEdges("Metroville","Narnia",37);
        List<String> cityNames=new ArrayList<>();
        cityNames.add("Narnia");
        cityNames.add("ssssss");
        cityNames.add("Naboo");

        System.out.println(businessTrip.businessTrip(graph2,cityNames));
        assertNull(businessTrip.businessTrip(graph2, cityNames));
    }
    @Test void EmptyCityListTest(){
        BusinessTrip businessTrip=new BusinessTrip();
        Graph graph2=new Graph();
        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstropolis");
        graph2.addVertex("Narnia");
        graph2.addVertex("Naboo");

        graph2.addEdges("Pandora","Arendelle",150);
        graph2.addEdges("Pandora","Metroville",82);
        graph2.addEdges("Arendelle","Metroville",99);
        graph2.addEdges("Arendelle","Monstropolis",42);
        graph2.addEdges("Metroville","Monstropolis",105);
        graph2.addEdges("Naboo","Monstropolis",73);
        graph2.addEdges("Naboo","Metroville",26);
        graph2.addEdges("Naboo","Narnia",250);
        graph2.addEdges("Metroville","Narnia",37);
        List<String> cityNames=new ArrayList<>();

        System.out.println(businessTrip.businessTrip(graph2,cityNames));
        assertNull(businessTrip.businessTrip(graph2, cityNames));
    }
    /////////////////////////////////// Depth first search ///////////////////////////////////////////
    @Test void depthFirstSearchTest(){
        Graph g=new Graph();
        System.out.println(g.addVertex("A"));
        System.out.println(g.addVertex("B"));
        System.out.println(g.addVertex("C"));
        System.out.println(g.addVertex("D"));
        System.out.println(g.addVertex("E"));
        System.out.println(g.addVertex("F"));
        System.out.println(g.addVertex("G"));
        System.out.println(g.addVertex("H"));

        g.addEdges("A","B",150);
        g.addEdges("A","D",82);
        g.addEdges("B","C",99);
        g.addEdges("B","D",42);
        g.addEdges("C","G",105);
        g.addEdges("D","E",73);
        g.addEdges("D","H",26);
        g.addEdges("D","F",250);
        g.addEdges("H","F",37);

        assertEquals("[A, B, C, G, D, E, H, F]",g.DepthFirstSearch(new Vertex("A")).toString());
    }

    @Test void depthFirstSearchNotExistsRootTest(){
        Graph g=new Graph();
        System.out.println(g.addVertex("A"));
        System.out.println(g.addVertex("B"));
        System.out.println(g.addVertex("C"));
        System.out.println(g.addVertex("D"));
        System.out.println(g.addVertex("E"));
        System.out.println(g.addVertex("F"));
        System.out.println(g.addVertex("G"));
        System.out.println(g.addVertex("H"));

        g.addEdges("A","B",150);
        g.addEdges("A","D",82);
        g.addEdges("B","C",99);
        g.addEdges("B","D",42);
        g.addEdges("C","G",105);
        g.addEdges("D","E",73);
        g.addEdges("D","H",26);
        g.addEdges("D","F",250);
        g.addEdges("H","F",37);

        assertNull(g.DepthFirstSearch(new Vertex("S")));
    }
    @Test void depthFirstSearchEmptyEdgesTest(){
        Graph g=new Graph();
        System.out.println(g.addVertex("A"));
        System.out.println(g.addVertex("B"));
        System.out.println(g.addVertex("C"));
        System.out.println(g.addVertex("D"));
        System.out.println(g.addVertex("E"));
        System.out.println(g.addVertex("F"));
        System.out.println(g.addVertex("G"));
        System.out.println(g.addVertex("H"));


        assertEquals("[A]",g.DepthFirstSearch(new Vertex("A")).toString());
    }

}
