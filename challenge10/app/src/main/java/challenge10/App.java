/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge10;

import challenge10.AnimalShelter.AnimalShelter;
import challenge10.AnimalShelter.Cat;
import challenge10.AnimalShelter.Dog;
import challenge10.Trees.data.BTNode;
import challenge10.Trees.structure.BinarySearchTree;
import challenge10.Trees.structure.BinaryTree;
import challenge10.pseudoQueue.pseudoQueue;
import challenge10.queue.structure.Queue;
import challenge10.stack.structure.Stack;
import challenge10.validateBrackets.ValidateBrackets;

import static challenge10.Trees.structure.BinaryTree.TraversalOrder.INORDER;
import static challenge10.Trees.structure.BinaryTree.TraversalOrder.POSTORDER;
import static challenge10.Trees.structure.BinaryTree.TraversalOrder.PREORDER;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws Exception {
        System.out.println(new App().getGreeting());

        Stack newStack=new Stack();
        newStack.push("1");
        newStack.push("2");
        newStack.push("3");
        newStack.push("4");
        newStack.push("5");
        System.out.println(newStack);
        System.out.println(newStack.pop());
        System.out.println(newStack);
        System.out.println(newStack.peek());

        System.out.println("------------------------------------------Queue---------------------------------------");

        Queue newQueue=new Queue();
        newQueue.enqueue("1");
        newQueue.enqueue("2");
        newQueue.enqueue("3");
        newQueue.enqueue("4");
        newQueue.enqueue("5");
        System.out.println(newQueue);
        System.out.println(newQueue.dequeue());
        System.out.println(newQueue);
        System.out.println(newQueue.peek());

        pseudoQueue newPseudoQueue=new pseudoQueue();
        newPseudoQueue.enQueue("1");
        newPseudoQueue.enQueue("2");
        newPseudoQueue.enQueue("3");
        newPseudoQueue.enQueue("4");
        System.out.println(newPseudoQueue.getS1());

        System.out.println("--------------------------------------------- Animal shelter ------------------------");

        AnimalShelter animal=new AnimalShelter();
        animal.enQueue(new Cat("cat1"));
        animal.enQueue(new Dog("dog1"));
        animal.enQueue(new Cat("cat2"));
        animal.enQueue(new Dog("dog2"));
        animal.enQueue(new Cat("cat3"));

        System.out.println(animal.getSize());
        System.out.println(animal.deQueue("cat"));
        System.out.println(animal.getSize());
        System.out.println(animal);

        System.out.println("---------------------------------------------------------------------------------");
        String str="[}";
        ValidateBrackets ob=new ValidateBrackets();
        System.out.println(ob.validateBrackets(str));

        System.out.println("-------------------------------trees--------------------------------------------------");
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        System.out.println(newTree.getRoot());
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        System.out.println(newTree);
        System.out.println(newTree.getRoot());
        System.out.println(newTree.traverse(INORDER));
        System.out.println(newTree.traverse(PREORDER));
        System.out.println(newTree.traverse(POSTORDER));
        System.out.println(newTree.Contains(90));
        System.out.println(newTree.Contains(9));
        System.out.println("-------------------breadth first---------------------------");
        System.out.println(newTree.breadthFirst());
        System.out.println("----------------------------------------------");

        BinaryTree<Integer> tre=new BinaryTree<>(9);
        System.out.println(tre.getRoot());

        System.out.println("------------------------- tree max ---------------------------------");
        BinaryTree<Integer> maxTree=new BinaryTree<Integer>();
        BTNode<Integer> node1=new BTNode<Integer>(2);
        maxTree.setRoot(node1);

        node1.setLeftNode(new BTNode<Integer>(7));
        node1.setRightNode(new BTNode<Integer>(5));

        node1.getLeftNode().setLeftNode(new BTNode<Integer>(2));
        node1.getLeftNode().setRightNode(new BTNode<Integer>(6));

        node1.getLeftNode().getRightNode().setLeftNode(new BTNode<Integer>(5));
        node1.getLeftNode().getRightNode().setRightNode(new BTNode<Integer>(11));

        node1.getRightNode().setRightNode(new BTNode<Integer>(9));
        node1.getRightNode().getRightNode().setLeftNode(new BTNode<Integer>(4));

        System.out.println("The max number => "+maxTree.getMaxNum());
        System.out.println("------------------------- fizzbuzz ---------------------------------");
        BinaryTree<Integer> fizzbuzz=new BinaryTree<>();
        fizzbuzz.setRoot(new BTNode<>(5));
        fizzbuzz.getRoot().setLeftNode(new BTNode<>(4));
        fizzbuzz.getRoot().setRightNode(new BTNode<>(3));
        fizzbuzz.getRoot().getLeftNode().setLeftNode(new BTNode<>(15));
        fizzbuzz.getRoot().getLeftNode().setRightNode(new BTNode<>(9));
        fizzbuzz.getRoot().getRightNode().setLeftNode(new BTNode<>(6));
        fizzbuzz.getRoot().getRightNode().setRightNode(new BTNode<>(7));
        System.out.println(fizzbuzz.fizzbuzzTree(fizzbuzz));



    }
}
