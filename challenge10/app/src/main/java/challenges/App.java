/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenges;

import challenges.AnimalShelter.Animal;
import challenges.AnimalShelter.AnimalShelter;
import challenges.AnimalShelter.Cat;
import challenges.AnimalShelter.Dog;
import challenges.HashMap.Structure.HashMap;
import challenges.InsertionSort.InsertionSort;
import challenges.MergeSort.MergeSort;
import challenges.QuickSort.QuickSort;
import challenges.RepeatedWord.RepeatedWord;
import challenges.Trees.data.BTNode;
import challenges.Trees.structure.BinarySearchTree;
import challenges.Trees.structure.BinaryTree;
import challenges.pseudoQueue.pseudoQueue;
import challenges.queue.structure.Queue;
import challenges.stack.structure.Stack;
import challenges.validateBrackets.ValidateBrackets;

import java.util.Arrays;

import static challenges.Trees.structure.BinaryTree.TraversalOrder.INORDER;
import static challenges.Trees.structure.BinaryTree.TraversalOrder.POSTORDER;
import static challenges.Trees.structure.BinaryTree.TraversalOrder.PREORDER;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws Exception {
        System.out.println(new App().getGreeting());

        Stack newStack=new Stack();
        newStack.push("1");
        newStack.push("2");
        newStack.push("3");
        newStack.push("4");
        newStack.push("5");
        System.out.println(newStack);
        System.out.println(newStack.pop());
        System.out.println(newStack);
        System.out.println(newStack.peek());

        System.out.println("------------------------------------------Queue---------------------------------------");

        Queue<String> newQueue=new Queue<>();
        newQueue.enqueue("1");
        newQueue.enqueue("2");
        newQueue.enqueue("3");
        newQueue.enqueue("4");
        newQueue.enqueue("5");
        System.out.println(newQueue);
        System.out.println(newQueue.dequeue());
        System.out.println(newQueue);
        System.out.println(newQueue.peek());

        pseudoQueue newPseudoQueue=new pseudoQueue();
        newPseudoQueue.enQueue("1");
        newPseudoQueue.enQueue("2");
        newPseudoQueue.enQueue("3");
        newPseudoQueue.enQueue("4");
        System.out.println(newPseudoQueue.getS1());

        System.out.println("--------------------------------------------- Animal shelter ------------------------");

        AnimalShelter<Animal> animal=new AnimalShelter<>();
        animal.enQueue(new Cat("cat1"));
        animal.enQueue(new Dog("dog1"));
        animal.enQueue(new Cat("cat2"));
        animal.enQueue(new Dog("dog2"));
        animal.enQueue(new Cat("cat3"));

        System.out.println(animal.getSize());
        System.out.println(animal.deQueue("cat"));
        System.out.println(animal.getSize());
        System.out.println(animal);

        System.out.println("---------------------------------------------------------------------------------");
        String str="[}";
        ValidateBrackets ob=new ValidateBrackets();
        System.out.println(ob.validateBrackets(str));

        System.out.println("-------------------------------trees--------------------------------------------------");
        BinarySearchTree<Integer> newTree=new BinarySearchTree<>();
        System.out.println(newTree.getRoot());
        newTree.add(5);
        newTree.add(8);
        newTree.add(4);
        newTree.add(3);
        newTree.add(4);
        newTree.add(90);
        newTree.add(55);
        System.out.println(newTree);
        System.out.println(newTree.getRoot());
        System.out.println(newTree.traverse(INORDER));
        System.out.println(newTree.traverse(PREORDER));
        System.out.println(newTree.traverse(POSTORDER));
        System.out.println(newTree.Contains(90));
        System.out.println(newTree.Contains(9));
        System.out.println("-------------------breadth first---------------------------");
        System.out.println(newTree.breadthFirst());
        System.out.println("----------------------------------------------");

        BinaryTree<Integer> tre=new BinaryTree<>(9);
        System.out.println(tre.getRoot());

        System.out.println("------------------------- tree max ---------------------------------");
        BinaryTree<Integer> maxTree=new BinaryTree<Integer>();
        BTNode<Integer> node1=new BTNode<Integer>(2);
        maxTree.setRoot(node1);

        node1.setLeftNode(new BTNode<Integer>(7));
        node1.setRightNode(new BTNode<Integer>(5));

        node1.getLeftNode().setLeftNode(new BTNode<Integer>(2));
        node1.getLeftNode().setRightNode(new BTNode<Integer>(6));

        node1.getLeftNode().getRightNode().setLeftNode(new BTNode<Integer>(5));
        node1.getLeftNode().getRightNode().setRightNode(new BTNode<Integer>(11));

        node1.getRightNode().setRightNode(new BTNode<Integer>(9));
        node1.getRightNode().getRightNode().setLeftNode(new BTNode<Integer>(4));

        System.out.println("The max number => "+maxTree.getMaxNum());
        System.out.println("------------------------- fizzbuzz ---------------------------------");
        BinaryTree<Integer> fizzbuzz=new BinaryTree<>();
        fizzbuzz.setRoot(new BTNode<>(5));
        fizzbuzz.getRoot().setLeftNode(new BTNode<>(4));
        fizzbuzz.getRoot().setRightNode(new BTNode<>(3));
        fizzbuzz.getRoot().getLeftNode().setLeftNode(new BTNode<>(15));
        fizzbuzz.getRoot().getLeftNode().setRightNode(new BTNode<>(9));
        fizzbuzz.getRoot().getRightNode().setLeftNode(new BTNode<>(6));
        fizzbuzz.getRoot().getRightNode().setRightNode(new BTNode<>(7));
        System.out.println(fizzbuzz.fizzbuzzTree(fizzbuzz));

        System.out.println("------------------------- Insertion Sort ---------------------------------");

        int[] ar={8,4,23,42,16,15};
        System.out.println("the original array--> "+ Arrays.toString(ar));
        InsertionSort sortedArray=new InsertionSort();
        System.out.println(Arrays.toString(sortedArray.Insertion(ar)));

        System.out.println("------------------------- merge Sort ---------------------------------");
        int[] ar2={8,4,23,42,16,15};
        System.out.println("the original array--> "+ Arrays.toString(ar2));
        MergeSort mergeSort=new MergeSort();
        System.out.println("sorted by merge sort algorithm= "+Arrays.toString(mergeSort.Mergesort(ar2)));

        System.out.println("------------------------- quick Sort ---------------------------------");
        int[] ar3={8,4,23,42,16,15};
        System.out.println("the original array--> "+ Arrays.toString(ar3));
        QuickSort quickSort=new QuickSort();
        quickSort.quickSort(ar3,0,ar3.length-1);
        System.out.println("sorted by quick sort algorithm= "+ Arrays.toString(ar3));

        System.out.println("------------------------- hash map ---------------------------------");
        HashMap<String, String> hashMap=new HashMap<>();
        hashMap.put("java","java");
        hashMap.put("python","python");
        hashMap.put("kotlin","kotlin");
        hashMap.put("js","js");
        hashMap.put("html","html");
        hashMap.put("css","css");
        hashMap.put("php","php");
        hashMap.put("c","c");

        System.out.println("the size of the hashMap= "+hashMap.getSize());
        System.out.println("********************************");

        System.out.println("The value of kotlin key is --> "+hashMap.get("kotlin"));
        System.out.println("The value of css key is --> "+hashMap.get("css"));
        System.out.println("The value of js key is --> "+hashMap.get("js"));
        System.out.println("The value of anythingElse key is --> "+hashMap.get("anythingElse"));  // return null
        System.out.println("********************************");

        // change the value of php key to "changed" because it is redundant
        System.out.println("The value of php key is --> "+hashMap.get("php"));  // the value -> php
        hashMap.put("php","changed");
        System.out.println("The value of php key is --> "+hashMap.get("php"));  // the value -> changed
        System.out.println("the size of the hashMap= "+hashMap.getSize());
        System.out.println("********************************");

        System.out.println("is the hashMap contains (html) ? "+hashMap.contains("html"));
        System.out.println("is the hashMap contains (anythingElse) ? "+hashMap.contains("anythingElse"));
        System.out.println("********************************");


        System.out.println("The keys list: "+hashMap.keys());
        System.out.println(hashMap.getBucketArray());
        System.out.println("********************************");

        // edge case -> key not exists
        System.out.println("the index for css is -> "+hashMap.hash("css"));
        System.out.println("the index for js is -> "+hashMap.hash("js"));
        System.out.println("the index for c++ is -> "+hashMap.hash("c++")); // return null
        System.out.println("********************************");

        // edge case -> empty array
        HashMap<String, String> hashMap2=new HashMap<>();
        System.out.println("The keys list: "+hashMap2.keys());  // return []


        System.out.println("------------------------- hash map repeated word -------------------------------------");

        RepeatedWord newString=new RepeatedWord();
        System.out.println("the repeated word: "+newString.repeatedWord("Once upon a time, there was a brave princess who"));
        System.out.println("********************************");
        System.out.println("the repeated word: "+newString.repeatedWord("It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way – in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only"));
        System.out.println("********************************");
        System.out.println("the repeated word: "+newString.repeatedWord("It was a queer, sultry summer, the summer they electrocuted the Rosenbergs, and I didn’t know what I was doing in New York"));
        System.out.println("********************************");
        System.out.println("words count: "+newString.wordsCount("Once upon a time, there was a brave princess who"));


    }
}
